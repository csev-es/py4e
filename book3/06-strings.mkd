Cadenas
=======

Una cadena es una secuencia
----------------------

\index{secuencia}
\index{caracter}
\index{operador corchete}
\index{operador!corchete}

Una cadena es una *secuencia* de caracteres. Puedes acceder
los caracteres uno a la vez con el operador corchete:

~~~~ {.python}
>>> fruta = 'banana'
>>> letra = fruta[1]
~~~~

\index{index}
\index{}

La segunda sentencia extrae el caracter en la posición del indice 1 de
la variable `fruta` y la asigna a la variable `letra`.

La expresión en los corchetes es llamada un *índice*. El
índice indica cuál caracter de la secuencia quieres (de aquí el
nombre).

Pero podrías no obtener lo que esperas:

~~~~ {.python}
>>> print(letra)
a
~~~~

Para la mayoría de las personas, la primer letra de "banana" es "b", no
"a". Pero en Python, el índice es un desfase desde el inicio
de la cadena, y el desfase de la primer letra es cero.

~~~~ {.python}
>>> letra = fruta[0]
>>> print(letra)
b
~~~~

Así que "b" es la letra 0 ("cero") de "banana",
"a" es la 1er letra ("primer"), y "n" es la
2da ("segunda") letra.

![Indices de Cadenas](height=0.75in@../images/string)

\index{index!empezando desde cero}
\index{cero, índice empezando desde}

Puedes usar cualquier expresión, incluyendo variables y operadores, como un
índice, pero el valor del índice tiene que ser un entero. De otro modo
obtendrás:

\index{index}
\index{}
\index{exception!TypeError}
\index{TypeError}

~~~~ {.python}
>>> letra = fruta[1.5]
TypeError: string indices must be integers
~~~~

Obtener el tamaño de una cadena usando `len`
-----------------------------------------------------

\index{len function}
\index{function!len}

`len` es una función nativa que regresa el número de
caracteres en una cadena:

~~~~ {.python}
>>> fruta = 'banana'
>>> len(fruta)
6
~~~~

Para obtener la última letra de una cadena, podrías estar tentado a probar
algo como esto:

\index{exception!IndexError}
\index{IndexError}

~~~~ {.python}
>>> tamaño = len(fruta)
>>> ultima = fruta[tamaño]
IndexError: string index out of range
~~~~

La razón de que haya un `IndexError` es que ahí no hay ninguna letra en
"banana" con el índice 6. Puesto que empezamos a contar desde
cero, las seis letras están enumeradas desde 0 hasta 5. Para obtener el último caracter,
tienes que restar 1 del `length`:

~~~~ {.python}
>>> ultima = fruta[tamaño-1]
>>> print(ultima)
a
~~~~

Alternativamente, puedes usar índices negativos, los cuales cuentan hacia atrás desde
el final de la cadena. La expresión `fruta[-1]` regresa la
última letra, `fruta[-2]` regresa la penúltima letra, y así
sucesivamente.

\index{index!negative}
\index{negative index}

Recorriendo una cadena mediante un bucle
--------------------------------------

\index{recorrido}
\index{bucle!recorrido}
\index{bucle for}
\index{bucle!for}
\index{expresión!for}
\index{recorrido}

Muchos de los cálculos requieren procesar una cadena con un caracter a la
vez. Frecuentemente empiezan desde el inicio, seleccionando cada caracter presente,
hacer algo con él, y continuar hasta el final. Este patrón de
procesamiento es llamado un *recorrido*. Una manera de escribir un
recorrido es con un bucle `while`:

~~~~ {.python}
indice = 0
while indice < len(fruta):
    letra = fruta[indice]
    print(letra)
    indice = indice + 1
~~~~

Este bucle recorre la cadena e imprime cada letra en una línea
cada una. La condición del bucle es `indice < len(fruta)`, así que cuando
`indice` es igual al tamaño de la cadena, la condición
es falsa, y el código del bucle no se ejecuta. El último caracter
accedido es el que tiene el índice `len(fruta)-1`, el cual es
el último caracter en la cadena.

**Ejercicio 1: Escribe un bucle `while` que comienza con el último
caracter en la cadena y trabaja hacia atrás hasta el primer
caracter en la cadena, imprimiendo cada letra en una línea independiente, excepto
al revés.**

Otra forma de escribir un recorrido es con un bucle `for`:

~~~~ {.python}
for caracter in fruta:
    print(caracter)
~~~~

Cada vez que iteramos el bucle, el siguiente caracter en la cadena es asignado
a la variable `caracter`. El ciclo continua hasta que no
quedan caracteres.

Parte de una cadena
-------------

\index{parte operador}
\index{operador!parte}
\index{indice!parte}
\index{cadena!parte}
\index{parte!cadena}

Un segmento de una cadena es llamado *parte*. Seleccionar una
parte es similar a seleccionar un caracter:

~~~~ {.python}
>>> s = 'Monty Python'
>>> print(s[0:5])
Monty
>>> print(s[6:12])
Python
~~~~

El operador retorna la parte de la cadena desde el "n-avo" caracter
hasta el "m-avo" caracter, incluyendo el primero pero excluyendo el último.

Si omites el primer índice (antes de los dos puntos), la parte comienza desde el
inicio de la cadena. Si omites el segundo índice, la parte va hasta
el final de la cadena:

~~~~ {.python}
>>> fruta = 'banana'
>>> fruta[:3]
'ban'
>>> fruta[3:]
'ana'
~~~~

Si el primer índice es mayor que o igual que el segundo, el resultado es
una *cadena vacía*, representado por dos comillas:

\index{comillas}

~~~~ {.python}
>>> fruta = 'banana'
>>> fruta[3:3]
''
~~~~

Una cadena vacía no contiene caracteres y tiene un tamaño de 0, pero fuera de
esto, es lo mismo que cualquier otra cadena.

**Ejercicio 2: Dado que `fruta` es una cadena, ¿que significa
`fruta[:]`?**

\index{copia!parte}
\index{parte!copia}

Los cadenas son inmutables
---------------------

\index{mutabilidad}
\index{inmutabilidad}
\index{cadena!inmutable}

Puede ser tentador utilizar el operador en el lado izquierdo de una asignación,
con la intención de cambiar un caracter en una cadena. Por ejemplo:

\index{TypeError}
\index{exception!TypeError}

~~~~ {.python}
>>> saludo = 'Hola, mundo!'
>>> saludo[0] = 'J'
TypeError: 'str' object does not support item assignment
~~~~

El "object" en este caso es la cadena y el "item" es el caracter
que tratamos de asignar. Por ahora, un *object* es la misma
cosa que un valor, pero vamos a redefinir esa definición después. Un
*item* es uno de los valores en una secuencia.

\index{item}
\index{asignación item}
\index{asignación!item}
\index{inmutabilidad}

La razón por la cual ocurre el error es que las cadenas son *inmutables*,
lo cual significa que no puedes cambiar una cadena existente. Lo mejor que puedes hacer es
crear una nueva cadena que sea una variación del original:

~~~~ {.python}
>>> saludo = 'Hola, mundo!'
>>> nuevo_saludo = 'J' + saludo[1:]
>>> print(nuevo_saludo)
Jola, mundo!
~~~~

Este ejemplo concatena una nueva primer letra a una parte de
`saludo`. Esto no tiene efecto sobre la cadena original.

\indice{concatenacion}

Iterando y contando
--------------------

\index{contador}
\index{contando e iterando}
\index{iterando y contando}
\index{iterando!con cadenas}

El siguiente programa cuenta el número de veces que la letra
"a" aparece en una cadena:

~~~~ {.python}
palabra = 'banana'
contador = 0
for letra in palabra:
    if letra == 'a':
        contador = contador + 1
print(contador)
~~~~

Este programa demuestra otro patrón de computación llamado
*contador*. La variable `contador` es inicializada en
0 y después incrementa cada vez que una "a" es encontrada. Cuando el
bucle termina, `contador` contiene el resultado: el número total de
a's.

\index{encapsulación}

**Ejercicio 3: Encapsula este codigo en una función llamada `cuenta`, y
hazla general de tal modo que pueda aceptar una cadena y una letra como argumentos.**

El operador `in`
----------------------------

\index{in operador}
\index{operador!in}
\index{booleano operador}
\index{operador!booleano}

La palabra `in` es un operador booleano que toma dos cadenas
y regresa `True` si la primer cadena aparece como una subcadena de la
segunda:

~~~~ {.python}
>>> 'a' in 'banana'
True
>>> 'semilla' in 'banana'
False
~~~~

Comparación de cadenas
-----------------

\index{cadena!comparacion}
\index{comparacion!cadena}

Los operadores de comparacion funcionan en cadenas. Para ver si dos cadenas son
iguales:

~~~~ {.python}
if palabra == 'banana':
    print('Muy bien, bananas.')
~~~~ 

Otras operaciones de comparación son útiles para poner palabras en orden
alfabético:

~~~~ {.python}
if palabra < 'banana':
    print('Tu palabra, ' + palabra + ', está antes de banana.')
elif palabra > 'banana':
    print('Tu palabra, ' + palabra + ', está después de banana.')
else:
    print('Muy bien, bananas.')
~~~~

Python no maneja letras mayúsculas y minúsculas en la misma forma que
la gente lo hace. Todas las letras mayúsculas vienen antes de todas las letras
minúsculas, por ejemplo:

~~~~
Tu palabra, Piña, está antes que banana.
~~~~

Una forma común de manejar este problema es convertir cadenas a un formato
estándar, como todas a minúsculas, antes de llevar a cabo la comparación. Ten
en cuenta eso en caso de que tengas que defenderte contra un hombre armado
con una Piña.

Métodos de cadenas
---------------------------

Los cadenas son un ejemplo de *objetos* en Python. Un objeto
contiene ambos datos (el valor de la cadena misma) y
*métodos*, los cuales son efectivamente funciones que estan implementadas
dentro del objeto y que están disponibles para cualquier *instancia* del
objeto.

Python tiene una función llamada `dir` la cual lista los métodos
disponibles para un objeto. La función `type` muestra el tipo
de un objeto y la función `dir` muestra los métodos disponibles.

~~~~ {.python}
>>> cosa = 'Hola mundo'
>>> type(cosa)
<class 'str'>
>>> dir(cosa)
['capitalize', 'casefold', 'center', 'count', 'encode',
'endswith', 'expandtabs', 'find', 'format', 'format_map',
'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit',
'isidentifier', 'islower', 'isnumeric', 'isprintable',
'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower',
'lstrip', 'maketrans', 'partition', 'replace', 'rfind',
'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip',
'split', 'splitlines', 'startswith', 'strip', 'swapcase',
'title', 'translate', 'upper', 'zfill']
>>> help(str.capitalize)
Help on method_descriptor:

capitalize(...)
    S.capitalize() -> str

    Return a capitalized version of S, i.e. make the first character
    have upper case and the rest lower case.
>>>
~~~~

Mientras que la función `dir` enlista los métodos, puedes usar la función
`help` para obtener una breve documentación de un método, una mejor
fuente de documentación para los métodos de cadenas sería
<https://docs.python.org/library/stdtypes.html#string-methods>.

Llamar a un *método* es similar a llamar una función (ésta
toma argumentos y regresa un valor) pero el sintaxis es diferente. Llamamos
un método agregando el nombre del método al nombre de la variable usando
un punto como delimitador.

Por ejemplo, el método `upper` toma una cadena y regresa una
nueva cadena con todas las letras en mayúscula:

\index{método}
\index{cadena!método}

En vez de la sintaxis de función `upper(word)`, éste utiliza la
sintaxis de método `word.upper()`.

\index{notación del punto}

~~~~ {.python}
>>> palabra = 'banana'
>>> nueva_palabra = palabra.upper()
>>> print(nueva_palabra)
BANANA
~~~~

Esta forma de notación del punto especifica el nombre del método,
`upper`, y el nombre de la cadena al que se le aplicará el método,
`palabra`. Los paréntesis vacíos indican que este método no toma
argumentos.

\index{paréntesis!vacío}

Una llamada a un método es conocida como una *invocación*; en este caso,
diríamos que estamos invocando `upper` en
`palabra`.

\index{invocación}

Por ejemplo, hay un método de cadena llamado `find` que
busca por la posición de una cadena dentro de otra cadena:

~~~~ {.python}
>>> palabra = 'banana'
>>> indice = palabra.find('a')
>>> print(indice)
1
~~~~ 

En este ejemplo, invocamos `find` en `palabra` y
pasamos la letra que estamos buscando como un parámetro.

El método `find` puede encontrar subcadenas así como caracteres:

~~~~ {.python}
>>> palabra.find('na')
2
~~~~

Este puede tomar como un segundo argumento el índice desde donde debe empezar:

\index{argumento opcional}
\index{argumento!opcional}

~~~~ {.python}
>>> palabra.find('na', 3)
4
~~~~

Una tarea común es remover los espacios en blanco (espacios, tabs, o nuevas líneas)
en el inicio y el fin de una cadena usando el método
`strip`:

~~~~ {.python}
>>> linea = '  Aquí vamos  '
>>> linea.strip()
'Aquí vamos'
~~~~

Algunos métodos como *startswith* regresan valores booleanos.

~~~~ {.python}
>>> linea = 'Que tengas un buen día'
>>> linea.startswith('Que')
True
>>> linea.startswith('q')
False
~~~~

Puedes notar que `startswith` requiere que el formato (mayúscula o minúscula) coincida, de modo que
a veces tenemos que tomar la línea y cambiarla completa a minúsculas antes de hacer algúna
verificación utilizando el método `lower`.

~~~~ {.python}
>>> linea = 'Que tengas un buen día'
>>> linea.startswith('q')
False
>>> linea.lower()
'que tengas un buen día'
>>> linea.lower().startswith('q')
True
~~~~

En el último ejemplo, el método `lower` es llamado y después usamos
`startswith` para ver si la cadena resultante en minúsculas
comienza con la letra "q". Siempre y cuando seamos cuidadosos con el orden,
podemos hacer múltiples llamadas a métodos en una sola expresión.

\index{cuenta método}
\index{método!cuenta}

**Ejercicio 4: Hay un método de cadenas llamado `count` que es similar a
la función del ejercicio previo. Lee la documentación de este
método en:

<https://docs.python.org/library/stdtypes.html#string-methods> 

Escribe una invocación que cuenta el número de veces que una letra aparece
en "banana".**

Analizando cadenas
---------------

Frecuentemente, queremos ver una cadena y encontrar una subcadena. Por ejemplo
si se nos presentaran una seria de líneas con el siguiente formato:

`From stephen.marquard@`*` uct.ac.za`*` Sat Jan  5 09:14:16 2008`

y quisiéramos obtener únicamente la segunda parte de la dirección (esto es,
`uct.ac.za`) de cada línea, podemos hacer esto utilizando el método
`find` y una parte de la cadena.

Primero, tenemos que encontrar la posición de la arroba en la cadena. Después,
tenemos que encontrar la posición del primer espacio *después* de la arroba. Y después
usaremos una parte de la cadena para extraer la porción de la cadena que
estamos buscando.

~~~~ {.python}
>>> dato = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'
>>> arrobapos = dato.find('@')
>>> print(arrobapos)
21
>>> espos = dato.find(' ',arrobapos)
>>> print(espos)
31
>>> direccion = dato[arrobapos+1:espos]
>>> print(direccion)
uct.ac.za
>>>
~~~~

Utilizamos una versión del método `find` que nos permite
especificar una posición en la cadena donde queremos que `find`
comience a buscar.
Cuando recortamos una parte de una cadena, extraemos los caracteres desde "uno después
del signo de arroba hasta *pero no incluyendo* el caracter de espacio".

La documentación del método `find` está disponible en

<https://docs.python.org/library/stdtypes.html#string-methods>.

El operador formato
---------------

\index{formato operador}
\index{operador!formato}

El *operador formato*, `%` nos permite
construir cadenas, reemplazar partes de las cadenas con datos almacenados
en variables. Cuando lo aplicamos a enteros, `%` es el operador
remanente. Pero cuando el primer operador es una cadena, `%` es el
operador formato.

\index{formato cadena}

El primer operando es la *cadena de formato*, la cual contiene
una o más *secuencias de formato* que especifican cómo el
segundo operando es formateado. El resultado es una cadena.

\index{secuencia de formato}

Por ejemplo, la secuencia de formato `%d` significa que el segundo operando
debería ser formateado como un entero ("d" significa "decimal"):

~~~~ {.python}
>>> camellos = 42
>>> '%d' % camellos
'42'
~~~~

El resultado es la cadena '42', el cual no debe ser confundido con el
entero de valor 42.

Una secuencia de formato puede aparecer en cualquier lugar en la cadena, así que puedes meter un
valor en una secuencia:

~~~~ {.python}
>>> camellos = 42
>>> 'Yo he visto %d camellos.' % camellos
'Yo he visto 42 camellos.'
~~~~

Si hay más de una secuencia de formato en la cadena, el segundo
argumento tiene que ser una tupla^[Una tupla es una secuencia de valores
separados por comas dentro de un par de paréntesis. Veremos tuplas en el Capítulo 10].
Cada secuencia de formato es relacionada con un
elemento de la tupla, en orden.

El siguiente ejemplo usa `%d` para formatear un entero, `%g` para formatear
un número de punto flotante (no preguntes por qué), y `%s` para formatear una cadena:

~~~~ {.python}
>>> 'En %d años yo he visto %g %s.' % (3, 0.1, 'camellos')
'En 3 años yo he visto 0.1 camellos.'
~~~~

El número de elementos en la tupla debe coincidir con el número de secuencias
de formato en la cadena. El tipo de los elementos también debe coincidir con
la secuencia de formato:

\index{exception!TypeError}
\index{TypeError}

~~~~ {.python}
>>> '%d %d %d' % (1, 2)
TypeError: not enough arguments for format string
>>> '%d' % 'dolares'
TypeError: %d format: a number is required, not str
~~~~

En el primer ejemplo, no hay suficientes elementos; en el segundo, el
elemento es de un tipo incorrecto.

El operador formato es poderoso, pero puede ser difícil de usar. Puedes
leer más al respecto en

<https://docs.python.org/library/stdtypes.html#printf-style-string-formatting>.

Depuración
---------

\index{depuración}

Una habilidad que debes cultivar cuando programas es siempre preguntarte
a tí mismo, "¿Qué pudo haber fallado aquí?" o alternativamente, "¿Qué cosa
ilógica podría hacer nuestro usuario final para hacer fallar nuestro programa (aparentemente) perfecto?"

Por ejemplo, observa el programa que utilizamos para demostrar el bucle
`while` en el capítulo de iteraciones:

\VerbatimInput{../code3/copytildone2.py}

Mira lo que pasa cuando el usuario ingresa una línea vacía como entrada:

~~~~ {.python}
> hello there
hello there
> # don't print this
> print this!
print this!
>
Traceback (most recent call last):
  File "copytildone.py", line 3, in <module>
    if line[0] == '#':
IndexError: string index out of range
~~~~

El código funciona bien hasta que se presenta una línea vacía. Después no hay un
caracter cero, por lo que obtenemos un rastreo (traceback). Hay dos soluciones a
esto para hacer la línea tres "segura" incluso si la línea está vacía.

Una posibilidad es simplemente usar el método `startswith`
que regresa `False` si la cadena está vacía.

~~~~ {.python}
if line.startswith('#'):
~~~~

\index{patrón guardián}
\index{patrón!guardián}

Otra forma segura es escribir una sentencia `if` utilizando el
patrón *guardián* y asegurarse que la segunda expresión lógica
es evaluada sólo cuando hay al menos un caracter en
la cadena:

~~~~ {.python}
if len(line) > 0 and line[0] == '#':
~~~~

Glosario
--------

contador
:   Una variable utilizada para contar algo, usualmente inicializada en cero y
    luego incrementada.
\index{contador}

cadena vacía
:   una cadena sin caracteres y de tamaño 0, representada por dos
    comillas sencillas.
\index{cadena vacía}

operador de formato
:   Un operador, `%`, que toma una cadena de formato y una tupla
    y genera una cadena que incluye los elementos de la tupla
    formateados como se especifíca en la cadena de formato.
\index{operador formato}
\index{operador!formato}

secuencia de formato
:   Una secuencia de caracteres en una cadena de formato, como `%d`,
    que especifíca cómo un valor debe ser formateado.
\index{secuencia de formato}

cadena de formato
:   Una cadena, usado con el operador de formato, que contiene
    secuencias de formato.
\index{cadena de formato}

bandera
:   Una variable booleana utilizada para indicar si una condición es verdadera o falsa.
\index{bandera}

invocación
:   Un enunciado que llama un método.
\index{invocación}

inmutable
:   La propiedad de una secuencia cuyos elementos no pueden ser asignados.
\index{immutability}

índice
:   Un valor de entero utilizado para seleccionar un ítem en una secuencia, tal como
    un caracter en una cadena.
\index{índice}
\index{}

ítem
:   Uno de los valores en una secuencia.
\index{ítem}

método
:   Una función que está asociada con un objeto y es llamada utilizando la
    notación de punto.
\index{método}

objeto
:   Algo a lo que una variable puede referir. Por ahora, puedes usar "objeto" y
    "valor" indistintamente.
\index{objeto}

búsqueda
:   Un patrón de recorrido que se detiene cuando encuentra lo que está
    buscando.
\index{patrón de búsqueda}
\index{patrón!búsqueda}

secuencia
:   Un conjunto ordenado; esto es, un conjunto de valores donde cada valor es
    identificado por un índice entero.
\index{secuencia}

parte
:   Una parte de una cadena especificado por un rango de índices.
\index{parte}

atraversar
:   Iterar a través de los ítems de una secuencia, ejecutando una operación
    similar en cada uno.
\index{atravesar}

Ejercicios
---------

**Ejercicio 5: Toma el siguiente código en Python que almacena una cadena:**

`str = 'X-DSPAM-Confidence: `**`0.8475`**`'`

**Utiliza `find` y una parte de la cadena para extraer la porción de la
cadena después del caracter dos puntos y después utiliza la función `float`
para convertir la cadena extraída en un número de punto flotante.**

\index{método cadena}
\index{método!cadena}

**Ejercicio 6: Lee la documentación de los métodos de cadenas en
<https://docs.python.org/library/stdtypes.html#string-methods>
Quizá quieras experimentar con algunos de ellos para asegurarte de entender
como funcionan. `strip` y `replace` son
particularmente útiles.**

**La documentación usa una sintaxis que puede ser confusa. Por ejemplo, en
`find(sub[, start[, end]])`, los corchetes indican argumentos posicionales.
De modo que `sub` es requerido, pero `start` es opcional, y
si tu incluyes `start`, entonces `end` es opcional.**

